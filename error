# Load the experimental conditions
trials_conditions = data.importConditions('conditions_stress.xlsx')
import pandas as pd
import random

# Convert to DataFrame
trials_df = pd.DataFrame(trials_conditions)

# Extract sentence_id (e.g., '01', '02') and condition (a-d)
trials_df['sentence_id'] = trials_df['sounds'].str.extract(r'(\d+)')[0]
trials_df['condition'] = trials_df['sounds'].str.extract(r'\d+([a-d])')[0]

# Shuffle sentence IDs and assign 10 to each condition group without duplication
sentence_ids = trials_df['sentence_id'].unique().tolist()
random.shuffle(sentence_ids)

cond_map = ['a', 'b', 'c', 'd']
condition_assignments = {}
for i, sid in enumerate(sentence_ids[:40]):  # Limit to 40 total trials
    cond = cond_map[i % 4]
    condition_assignments[sid] = cond

# Select exactly one sentence per ID, matching the assigned condition
selected_rows = []
for sid, cond in condition_assignments.items():
    match = trials_df[(trials_df['sentence_id'] == sid) & (trials_df['condition'] == cond)]
    if not match.empty:
        selected_rows.append(match.sample(1))  # pick 1 matching row

# Combine and shuffle
trials_selected_df = pd.concat(selected_rows).sample(frac=1).reset_index(drop=True)
trials_selected_rows = trials_selected_df.to_dict(orient='records')

# Set up handler to look after randomisation of conditions
trials = data.TrialHandler2(
    name='trials',
    nReps=1,
    method='sequential',
    extraInfo=expInfo,
    originPath=-1,
    trialList=trials_selected_rows,
    seed=None,
)
thisExp.addLoop(trials)
thisTrial = trials.trialList[0]
if thisTrial is not None:
    for paramName in thisTrial:
        globals()[paramName] = thisTrial[paramName]
