# store start times for test
test.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
test.tStart = globalClock.getTime(format='float')
test.status = STARTED
thisExp.addData('test.started', test.tStart)
test.maxDuration = None

# keep track of which components have finished
testComponents = test.components
for thisComponent in test.components:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED

# reset timers
t = 0
_timeToFirstFrame = win.getFutureFlipTime(clock="now")
frameN = -1

# --- Run Routine "test" ---
if isinstance(trials, data.TrialHandler2) and thisTrial.thisN != trials.thisTrial.thisN:
    continueRoutine = False
test.forceEnded = routineForceEnded = not continueRoutine

# Prepare trialClock and trigger vars
trialClock = core.Clock()
trigger_times = []
trigger_codes = []
next_trigger_index = 0

while continueRoutine:
    t = routineTimer.getTime()
    tThisFlip = win.getFutureFlipTime(clock=routineTimer)
    tThisFlipGlobal = win.getFutureFlipTime(clock=None)
    frameN += 1
    now = trialClock.getTime()

    # --- Trigger sending ---
    for i, (target_time, code) in enumerate(zip(trigger_delays_sec, trigger_codes)):
        if not trigger_sent[i] and now >= target_time:
            send_trigger(code)
            print(f"[DEBUG] Trigger {code} sent at {now * 1000:.1f} ms (expected {target_time * 1000:.1f} ms)")
            trigger_sent[i] = True

    # --- Response collection ---
    if key_resp_2.status == STARTED and not waitOnFlip:
        buttons = joy.getAllButtons()
        if buttons[4]:
            key_resp_2.keys = 'left'
            key_resp_2.rt = response_clock.getTime()
            continueRoutine = False
        elif buttons[5]:
            key_resp_2.keys = 'right'
            key_resp_2.rt = response_clock.getTime()
            continueRoutine = False

        if key_resp_2.keys is not None:
            key_resp_2.corr = 1 if key_resp_2.keys == corrAns else 0

    # --- Fixation cross ---
    if fixationcross.status == NOT_STARTED:
        fixationcross.setAutoDraw(True)
        fixationcross.status = STARTED
    elif fixationcross.status == STARTED and now >= 0.5:
        fixationcross.setAutoDraw(False)
        fixationcross.status = FINISHED

    # --- Exit conditions ---
    if defaultKeyboard.getKeys(keyList=["escape"]):
        thisExp.status = FINISHED
        continueRoutine = False

    if not continueRoutine:
        break

    win.flip()

# --- End Routine "test" ---
test_sound.stop()
test.tStop = globalClock.getTime(format='float')
thisExp.addData('test.stopped', test.tStop)

if key_resp_2.keys in ['', [], None]:
    key_resp_2.keys = None
    if str(corrAns).lower() == 'none':
        key_resp_2.corr = 1
    else:
        key_resp_2.corr = 0

trials.addData('key_resp_2.keys', key_resp_2.keys)
trials.addData('key_resp_2.corr', key_resp_2.corr)
if key_resp_2.keys is not None:
    trials.addData('key_resp_2.rt', key_resp_2.rt)
trials.addData('corrAns', corrAns)

routineTimer.reset()
